Trial 1

def bruteForceSearch(digraph, start, end, maxTotalDist, maxDistOutdoors):    
    """
    Finds the shortest path from start to end using brute-force approach.
    The total distance travelled on the path must not exceed maxTotalDist, and
    the distance spent outdoor on this path must not exceed maxDistOutdoors.

    Parameters: 
        digraph: instance of class Digraph or its subclass
        start, end: start & end building numbers (strings)
        maxTotalDist : maximum total distance on a path (integer)
        maxDistOutdoors: maximum distance spent outdoors on a path (integer)

    Assumes:
        start and end are numbers for existing buildings in graph

    Returns:
        The shortest-path from start to end, represented by 
        a list of building numbers (in strings), [n_1, n_2, ..., n_k], 
        where there exists an edge from n_i to n_(i+1) in digraph, 
        for all 1 <= i < k.

        If there exists no path that satisfies maxTotalDist and
        maxDistOutdoors constraints, then raises a ValueError.
    """
    #TODO
    path, totalDist, totalOutDist = WeightedDFS(digraph, Node(start), Node(end), float(maxTotalDist), float(maxDistOutdoors))
    result = []
    for node in path:
        result.append(str(node))
    return result

def WeightedDFS(graph, start, end, maxTotalDist, maxDistOutdoors, path = []):
    #assumes graph is a Digraph
    #assumes start and end are nodes in graph
    path = path + [Node(start)]
    if start == end:
        return (path, 0.0, 0.0)
    for node in graph.childrenOf(start):
        if node not in path: #avoid cycles
            newPath, totalDist, outDist = WeightedDFS(graph, node, end, maxTotalDist, maxDistOutdoors, path)
            if newPath != None:
                distances = graph.edgeWeight(start, node)
                newTotalDist = totalDist + distances[0]
                newOutDist = outDist + distances[1]

                if newTotalDist <= maxTotalDist and newOutDist <= maxDistOutdoors:
                    return (newPath, newTotalDist, newOutDist)
    raise ValueError('Path not found')


